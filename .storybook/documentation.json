{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-01edb2c39c082a279ac6dfd3f343e31a21d1f8dac9787dd393d5a296ac9f8a5cf51206930b981f57cc854b4cb428d763acdc277db564bdc9527a475f85b55b51",
      "file": "src/app/app.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["app.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'ln.angular'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "RouterOutlet"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: 'app.html',\n  styleUrl: 'app.scss'\n})\nexport class AppComponent {\n  title = 'ln.angular';\n}\n",
      "styleUrl": "app.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<main class=\"layout\">\n  <div class=\"header\"></div>\n  <section class=\"content\">\n    <router-outlet />\n  </section>\n  <div class=\"footer\"></div>  \n</main>\n\n"
    },
    {
      "name": "LnDropDown",
      "id": "component-LnDropDown-e074ff438d8cd66eb37d0c36c70f28cfd84cd045034a8c0050280b0a75a6fbf77ee63c76c346b985b2c9381cd40b47e4467f2ab69454cb7a3dc9b7a6cc870d43",
      "file": "src/app/component/ln-dropdown/ln-dropdown.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: LnDropDown, multi: true,\n}"
        }
      ],
      "selector": "ln-dropdown",
      "styleUrls": ["ln-dropdown.scss"],
      "styles": [],
      "templateUrl": ["./ln-dropdown.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "fixation",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "hidden",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "Observable<any[]>",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "name": "placeholder",
          "defaultValue": "'Select...'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "name": "textField",
          "defaultValue": "'name'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "'dark'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "any | any[]",
          "decorators": []
        },
        {
          "name": "valueField",
          "defaultValue": "'id'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onValueChange",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_value",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 90,
          "modifierKind": [123]
        },
        {
          "name": "ariaLabel",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [125]
        },
        {
          "name": "ariaLabelledby",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [125]
        },
        {
          "name": "displayItem",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 83,
          "modifierKind": [125]
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Icon",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [125]
        },
        {
          "name": "keyManager",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ActiveDescendantKeyManager<any>",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [123]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 127,
          "modifierKind": [125]
        },
        {
          "name": "onOpen",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 184,
          "modifierKind": [125]
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 128,
          "modifierKind": [125]
        },
        {
          "name": "open",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [125]
        },
        {
          "name": "options",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 89,
          "modifierKind": [123]
        },
        {
          "name": "overlayRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [125]
        },
        {
          "name": "overlaySubscription",
          "defaultValue": "undefined",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [125]
        },
        {
          "name": "portalContainer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 70,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'portalContainer'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "portalView",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 71,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'portalView'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "selectedIndicatorIcon",
          "defaultValue": "new Icon()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Icon",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [125]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 78,
          "modifierKind": [125]
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 273,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "detachOverlay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 252,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClose",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "undefined"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 232,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "undefined",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onKeyboardDropDown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 291,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onKeyboardHiddenDropDown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 341,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onKeyDown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 280,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "_",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "_",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": []
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 265,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "LnIcon"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\n\n//\n// @angular/cdk\n//\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Observable, Subscription } from 'rxjs';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n//\n// @lernender/core\n//\nimport { Icon, Library, Response } from 'ln.core';\nimport { LnIcon } from '@component/ln-icon/ln-icon';\n\n@Component({\n  standalone: true,\n  imports: [CommonModule, LnIcon],\n  selector: 'ln-dropdown',\n  templateUrl: './ln-dropdown.html',\n  styleUrls: ['ln-dropdown.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: LnDropDown,\n      multi: true,\n    },\n  ],\n})\nexport class LnDropDown implements ControlValueAccessor, OnInit, AfterContentInit, OnDestroy\n{\n  @Input() public label: string = '';\n  @Input() public type: string = 'dark';\n  @Input() public textField: string = 'name';\n  @Input() public valueField: string = 'id';\n  @Input() public placeholder: string = 'Select...';\n  @Input() public fixation: boolean = false;\n  @Input() public hidden = false;\n  @Input() public disabled = false;\n  @Input()\n  get value(): any | any[] {\n    return this._value;\n  }\n  set value(v: any | any[]) {\n    if (v !== this._value) {\n      this._value = v;\n      this.onChange(v);\n    }\n  }\n  @Input() public items!: Observable<any[]>;\n  @Output() public onValueChange: EventEmitter<any> = new EventEmitter<any>();\n  //\n  // ViewChild()\n  //\n  @ViewChild('portalContainer') portalContainer!: ElementRef;\n  @ViewChild('portalView') portalView!: TemplateRef<any>;\n\n  //\n  // Public variables\n  //\n  public open: boolean = false;\n  public overlayRef: any;\n  public subscriptions: Subscription[] = [];\n  public overlaySubscription: Subscription | undefined = undefined;\n  public ariaLabel: string = '';\n  public ariaLabelledby: string = '';\n  public icon!: Icon;\n  public displayItem!: any;\n  public selectedIndicatorIcon: Icon = new Icon();\n  //\n  // Private Variables\n  //\n  private keyManager!: ActiveDescendantKeyManager<any>;\n  private options: any[] = [];\n  private _value: any = null;\n  //\n  // constructor()\n  //\n  constructor(\n    private overlay: Overlay,\n    private viewContainerRef: ViewContainerRef,\n  ) {\n    this.subscriptions = [];\n    this.selectedIndicatorIcon = new Icon({\n      name: 'check',\n    });\n    this.displayItem = {};\n  }\n  //\n  // ngOnDestroy()\n  //\n  ngOnDestroy(): void {\n    //\n    // Unsubscribe from all subscriptions\n    //\n    if (Library.isArrayWithLength(this.subscriptions))\n      this.subscriptions.forEach((s) => s.unsubscribe());\n    //\n    // onCloseContextMenu\n    //\n    this.detachOverlay();\n  }\n  //\n  // writeValue()\n  //\n  writeValue(value: any): void {\n    if (Library.isDefined(value)) {\n      this._value = value;\n      this.onChange(this._value);\n    }\n  }\n  public onChange = (_: any) => {};\n  public onTouched = () => {};\n  public registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n  //\n  // ngAfterContentInit()\n  //\n  ngAfterContentInit(): void {\n    this.keyManager = new ActiveDescendantKeyManager(this.options || [])\n      .withHorizontalOrientation('ltr')\n      .withVerticalOrientation()\n      .withWrap();\n  }\n  //\n  // ngOnInit()\n  //\n  ngOnInit(): void {\n    //\n    // Input Controls\n    //\n    this.icon = new Icon({\n      name: 'angle-down',\n      onClick: ($event: MouseEvent) => {\n        $event.preventDefault();\n        $event.stopPropagation();\n        this.toggle();\n      },\n    });\n\n    ///\n    // Listen in on changes to the items observable\n    //\n    this.subscriptions.push(\n      this.items.subscribe((items: any[]) => {\n        if (Library.isArray(items)) {\n          if (items.length === 0)\n            this.displayItem = { id: 0, name: this.placeholder };\n          else {\n            this.displayItem = items[0];\n            if (Library.isNumber(this.value)) {\n              items.forEach((item: any) => {\n                item.active = item.id === this.value;\n                if (item.active) this.displayItem = item;\n              });\n            }\n          }\n        }\n      }),\n    );\n  }\n  //\n  // onOpen\n  //\n  public onOpen = (event: MouseEvent) => {\n    //\n    // Detach Overlay\n    //\n    this.detachOverlay();\n    //\n    // Create Overlay Config\n    //\n    const config = new OverlayConfig({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.portalContainer)\n        .setOrigin(this.portalContainer)\n        .withPositions([\n          {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n          },\n        ]),\n      width: `${this.portalContainer.nativeElement.getBoundingClientRect().width}px`,\n      hasBackdrop: true,\n      scrollStrategy: this.overlay.scrollStrategies.reposition(),\n    });\n\n    //\n    // Define Overlay\n    //\n    this.overlayRef = this.overlay.create(config);\n    this.overlaySubscription = this.overlayRef\n      .backdropClick()\n      .subscribe(() => this.detachOverlay());\n    //\n    // Attach overlay to CdkPOrtal\n    //\n    /*\n      {\n        $implicit:  {},\n      }\n    */\n    this.overlayRef.attach(\n      new TemplatePortal(this.portalView, this.viewContainerRef),\n    );\n  };\n  //\n  // onClose()\n  //\n  public onClose(item: any = undefined) {\n    if (item) {\n      this.displayItem = item;\n      this.value = item[this.valueField];\n      //\n      // Toggle open/close\n      //\n      if (Library.isDefined(this.onValueChange)) {\n        this.onValueChange.emit(item);\n      }\n    }\n    //\n    // onCloseContextMenu\n    //\n    this.detachOverlay();\n  }\n\n  //\n  // detachOverlay()\n  //\n  private detachOverlay() {\n    if (this.overlayRef && this.overlayRef.hasAttached()) {\n      this.overlayRef.detach();\n    }\n\n    if (this.overlaySubscription) {\n      this.overlaySubscription.unsubscribe();\n      this.overlaySubscription = undefined;\n    }\n  }\n  //\n  // toggle()\n  //\n  public toggle() {\n    this.open = !this.open;\n    this.icon.name = this.open ? 'angle-up' : 'angle-down';\n  }\n\n  //\n  // close\n  //\n  public close() {\n    this.open = false;\n    this.icon.name = this.open ? 'angle-up' : 'angle-down';\n  }\n  //\n  // onKeyDown\n  //\n  public onKeyDown(event: KeyboardEvent): void {\n    if (this.open) {\n      this.onKeyboardDropDown(event);\n    } else {\n      this.onKeyboardHiddenDropDown(event);\n    }\n  }\n\n  //\n  // onKeyboardDropDown()\n  //\n  private onKeyboardDropDown(event: KeyboardEvent): void {\n    switch (event.key) {\n      // Enter and space cause the currently-highlighted\n      // item to become the active item\n      case 'Enter':\n      case ' ':\n        if (this.keyManager.activeItem) {\n          //this.selectOption(this.keyManager.activeItem);\n        }\n        break;\n      case 'Escape':\n        this.onClose();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowRight':\n      case 'ArrowLeft':\n        this.keyManager.onKeydown(event);\n        this.keyManager.activeItem?.scrollIntoView();\n        // This prevents the arrow keys from scrolling the\n        // page while the drop-down is focused\n        event.preventDefault();\n        break;\n      case 'Tab':\n        this.keyManager.onKeydown(event);\n        this.keyManager.activeItem?.scrollIntoView();\n        break;\n      case 'PageUp':\n      case 'PageDown':\n        // For page up/down we are just eating the default\n        // event to prevent the user from being in the select\n        // menu but jump around the page\n        event.preventDefault();\n        break;\n      default:\n        // For all keys besides the ones enumerated\n        // above we'll use a search function to\n        // select the item that begins with the letters\n        // that the user is entering\n        event.stopPropagation();\n      // const firstFound = this.getOptionStartingWith(event.key);\n      // if (firstFound) {\n      //     firstFound.scrollIntoView();\n      //     this.keyManager.setActiveItem(firstFound);\n      // }\n    }\n  }\n  //\n  // onKeyboardHiddenDropDown()\n  //\n  private onKeyboardHiddenDropDown(event: KeyboardEvent): void {\n    switch (event.key) {\n      case 'Enter':\n      case ' ':\n      case 'ArrowDown':\n      case 'ArrowUp':\n        // this.showDropdown();\n        // if (this.selectedOption) {\n        //     this.selectedOption.scrollIntoView();\n        // }\n        break;\n      default:\n        event.stopPropagation();\n      // const firstFound = this.getOptionStartingWith(event.key);\n      // if (firstFound) {\n      //     this.selectOption(firstFound);\n      // }\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use 'scss/mixins/flexbox.scss' as *;\n@use 'scss/mixins/standard.scss' as *;\n\n:host {\n  margin: 0;\n  padding: 0;\n  width: inherit;\n  height: auto;\n  outline: none;\n  position: relative;\n  background-color: transparent;\n  color: var(--color-black);\n}\n\n::ng-deep {\n  .cdk-overlay-container {\n    display: block !important;\n  }\n}\n\n.ln-dropdown {\n  cursor: default;\n  transition: all 0.5s ease;\n  outline-color: transparent;\n  outline-width: 0px;\n\n  &.hidden {\n    display: none;\n  }\n\n  &.disabled {\n    @include disabled();\n    pointer-events: none;\n    opacity: 0.4;\n  }\n\n  &:focus {\n    outline-color: transparent;\n    outline-width: 0px;\n  }\n\n  .label {\n    @include label();\n    @include flexbox-row();\n    justify-content: flex-start;\n    text-align: left;\n\n    &.hidden {\n      display: none;\n    }\n\n    &.disabled {\n      @include disabled();\n      color: var(--color-grey);\n      &.hover {\n        color: var(--color-grey);\n      }\n    }\n  }\n\n  .container {\n    width: 100%;\n\n    div.inner-container {\n      display: block;\n      position: relative;\n      width: 100%;\n\n      &.fixation-dialogbox {\n        min-width: 350px;\n        width: 350px;\n        max-width: 350px;\n      }\n\n      button.button {\n        @include border-radius(4px);\n        @include user-select();\n        position: relative;\n        border: none;\n        cursor: pointer;\n        display: inline-block;\n        height: 40px;\n        line-height: 40px;\n        margin: 0;\n        outline: none;\n        overflow: hidden;\n        padding: 0 24px 0 8px;\n        text-align: left;\n        text-overflow: ellipsis;\n        transition:\n          color 0.15s ease-in-out,\n          background-color 0.15s ease-in-out,\n          border-color 0.15s ease-in-out,\n          box-shadow 0.15s ease-in-out;\n        vertical-align: middle;\n        white-space: nowrap;\n        width: inherit;\n        box-shadow: 0 0 2px 0 rgba(27, 37, 50, 0.28);\n        -webkit-box-shadow: 0 0 2px 0 rgba(27, 37, 50, 0.28);\n        background-color: rgba(246, 246, 246, 1);\n        border: 1px solid rgba(178, 178, 179, 0.28);\n        width: inherit;\n\n        &.disabled {\n          @include disabled();\n          pointer-events: none;\n          color: var(--color-grey);\n          &.hover {\n            color: var(--color-grey);\n          }\n        }\n\n        &:hover {\n          box-shadow: 0 0 6px 0 var(--color-primary);\n          -webkit-box-shadow: 0 0 6px 0 var(--color-primary);\n        }\n\n        &.dark {\n          background-color: var(--color-primary-background-lighter);\n          //color: var(--color-white);\n          border: 1px solid var(--color-gray);\n\n          &.readonly {\n            pointer-events: none;\n            color: var(--color-gray-700);            \n          }          \n        }\n\n        &.dark-small {\n          background-color: var(--color-primary-background-lighter);\n          //color: var(--color-white);\n          height: 30px;\n          line-height: 30px;\n          width: 100px;\n\n          &.readonly {\n            pointer-events: none;\n            color: var(--color-grey);\n            &.hover {\n              color: var(--color-grey);\n            }\n          }          \n        }\n\n        .ln-dropdown-icon {\n          position: absolute;\n          top: 0;\n          right: 8px;\n        }\n      }\n    }\n  }\n}\n\nul.ln-dropdown-items {\n  -webkit-transition: 0.5s;\n  border-radius: 0 1px 4px 4px;\n  margin: 1px;\n  min-width: 100px;\n  max-width: inherit;\n  width: 100%;\n  max-height: calc((34px * 4) + 4px * 4);\n  padding: 8px 4px;\n  transition: 0.5s;\n  overflow: hidden;\n  overflow-y: auto;\n  //background-color: rgba(246, 246, 246, 1);\n  border: 1px solid rgba(178, 178, 179, 0.28);\n  background-color: #0d1427;\n\n  &.open {\n    display: block;\n  }\n\n  &:hover {\n    box-shadow: 0 0 6px 0 var(--color-primary);\n    //-webkit-box-shadow: 0 0 6px 0 var(--color-primary);\n  }\n\n  &.dark {\n    //background-color: var(--color-primary-background-lighter);\n    color: var(--color-white);\n  }\n\n  &.dark-small {\n    //background-color: var(--color-primary-background-lighter);\n    color: var(--color-white);\n    width: 100px;\n  }\n\n  li.ln-dropdown-item {\n    display: block;\n    transition: all 0.2s ease-in-out;\n    cursor: pointer;\n    text-align: left;\n    height: 34px;\n    line-height: 32px;\n    color: var(--color-white);\n    list-style-position: inside;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    // Add this to your code\n    width: 100%;\n    table-layout: fixed;\n\n    &.disabled {\n      pointer-events: none;\n      color: var(--color-grey);\n      &.hover {\n        color: var(--color-grey);\n      }\n    }\n\n    &:hover {\n      background-color: var(--color-gray-100);\n      color: var(--color-black);\n    }\n\n    &.indicator::before {\n      content: '';\n      border: 2px solid var(--color-primary-accent);\n      border-radius: 0px 5px 5px 0px;\n      height: 100%;\n      margin-right: 10px;\n    }\n\n    &.border-left::before {\n      content: '';\n      border: 2px solid transparent;\n      border-radius: 0px 5px 5px 0px;\n      height: 100%;\n      margin-right: 10px;\n    }\n  }\n\n  .ln-dropdown-item-icon-container {\n    min-width: 20px;\n    align-items: center;\n    justify-content: center;\n    &.right {\n      height: auto;\n      order: 2;\n    }\n  }\n  .ln-dropdown-item-icon {\n    &.right {\n      height: auto;\n      order: 2;\n    }\n  }\n\n  .ln-dropdown-item-label {\n    flex: auto;\n    flex-grow: 1;\n    flex-shrink: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    //color: var(--color-black);\n    background-color: transparent;\n\n    &.left {\n      order: 1;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      direction: rtl;\n    }\n  }\n}\n",
          "styleUrl": "ln-dropdown.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "overlay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 90,
        "jsdoctags": [
          {
            "name": "overlay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": [
        "ControlValueAccessor",
        "OnInit",
        "AfterContentInit",
        "OnDestroy"
      ],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "v",
                "type": "any | any[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "v",
                "type": "any | any[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "any | []",
            "line": 56
          }
        }
      },
      "templateData": "<div class=\"ln-dropdown\" tabindex=\"1\" [ngClass]=\"{\n  'hidden': hidden,\n  'disabled': disabled\n}\">\n<label class=\"label\" [class.hidden]=\"label?.length === 0\">{{label}}</label>\n<div class=\"container\">\n  <div class=\"inner-container\" [ngClass]=\"{'fixation-dialogbox' : fixation }\">\n    <button #portalContainer class=\"button\" [ngClass]=\"{\n        'dark': type === 'dark',\n        'dark-small': type === 'dark-small',\n        'readonly': (items | async)?.length === 0\n      }\" (keydown)=\"onKeyDown($event)\" [attr.aria-label]=\"ariaLabel || null\"\n            [attr.aria-labelledby]=\"ariaLabelledby || null\" [attr.aria-multiselectable]=\"false\"\n            (click)=\"onOpen($event)\">\n      {{ displayItem?.[textField]}}\n      <ln-icon class=\"ln-dropdown-icon\" [name]=\"icon.name\" (onClick)=\"icon.onClick($event)\"></ln-icon>\n    </button>\n  </div>\n</div>\n</div>\n<ng-template #portalView let-data>\n  <ul class=\"ln-dropdown-items\" [ngClass]=\"{\n    'dark': type === 'dark',\n    'dark-small': type === 'dark-small'\n  }\">\n    <li *ngFor=\"let item of items | async\" class=\"ln-dropdown-item\" [class.hidden]=\"item?.hidden\"\n      [class.disabled]=\"item?.disabled\" (click)=\"onClose(item)\" [title]=\"item[textField]\">\n      {{ item[textField] }}\n    </li>\n  </ul>\n</ng-template>\n"
    },
    {
      "name": "LnIcon",
      "id": "component-LnIcon-dbedee997088c1c7ebe9f8af95f5b77c658e32fcd07170b5afcfb4c1920579043a541bc50a1d710b4fba706c2c5b4f0c28ed00b14064104ee8a20d142df8447a",
      "file": "src/app/component/ln-icon/ln-icon.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "ln-icon",
      "styleUrls": ["ln-icon.scss"],
      "styles": [],
      "templateUrl": ["ln-icon.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "hidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "name": "padLeft",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "padRight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "style",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "object",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "classList",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [125]
        }
      ],
      "methodsClass": [
        {
          "name": "handleOnClick",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  OnChanges,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n} from '@angular/core';\n//\n// Lernender/Core\n//\nimport { Library } from 'ln.core';\n\n//\n// DASH Team:\n//            I'm not sure why we didn't encapsulate the icons into a\n//            stand-alone component? We have embedded SVG everywhere!!!\n\n//\n// ln-icon\n//\n@Component({\n  standalone: true,\n  imports: [CommonModule],  \n  selector: 'ln-icon',\n  templateUrl: 'ln-icon.html',\n  styleUrls: ['ln-icon.scss'],\n})\nexport class LnIcon implements OnChanges {\n  @Input() public disabled: boolean;\n  @Input() public hidden: boolean;\n  @Input() public active: boolean;\n  @Input() public style: object;\n  @Input() public color: string;\n  @Input() public type: string;\n  @Input() public name: string;\n  @Input() public title: string;\n  @Input() public padLeft: boolean;\n  @Input() public padRight: boolean;\n  @Output() public onClick: EventEmitter<any> = new EventEmitter();\n\n  //\n  // Public Variables\n  //\n  public classList: string = '';\n\n  //\n  // Constructor\n  //\n  constructor() {\n    this.type = 'fa-solid';\n    this.active = false;\n    this.name = '';\n    this.color = '';\n    this.title = '';\n    this.disabled = false;\n    this.hidden = false;\n    this.style = {};\n    this.padLeft = false;\n    this.padRight = false;\n  }\n\n  //\n  // OnClick\n  //\n  public handleOnClick(event: MouseEvent) {\n    event.stopPropagation();\n    //event.preventDefault();\n    if (Library.isDefined(this.onClick)) {\n      this.onClick.emit(event);\n    }\n  }\n\n  //\n  // ngOnChange\n  //\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes['name']?.currentValue) {\n      this.classList = `${this.type} ${this.name} ${this.color}`;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use \"sass:string\";\n@use 'scss/mixins/standard.scss' as *;\n\n.ln-icon {\n  opacity: 1;\n\n  .hidden {\n    display: none;\n  }\n\n  i.fa-solid,\n  i.fa-regular {\n    font-family: var(--fa-font-solid) !important;\n    font-style: normal;\n    font-weight: 900;\n    transition: background-color 0.5s ease;\n    text-rendering: auto;\n    text-transform: none;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    display: inline-block;\n    cursor: pointer;\n\n  &.disabled {\n    @include disabled();\n    pointer-events: none;\n    opacity: .4;\n  }\n\n    &:hover {\n      color: var(--color-primary-accent-hover);\n    }\n\n    &.active {\n      color: var(--color-secondary);\n    }\n\n    &.blue {\n      color: var(--color-blue);\n    }\n\n    &.green {\n      color: var(--color-green);\n    }\n\n    &.red {\n      color: var(--color-red);\n    }\n\n    &.hidden {\n      display: none;\n    }\n\n    &.pad-left {\n      padding-left: 8px;\n    }\n\n    &.pad-right {\n      padding-right: 8px;\n    }\n\n    &.angle-up:before {\n      content: string.unquote(\"\\\"\\\\#{'f106'}\\\"\");\n    }\n    &.wide-angle-down:before {\n      content: string.unquote(\"\\\"\\\\#{'f078'}\\\"\");\n    }\n    &.wide-angle-up:before {\n      content: string.unquote(\"\\\"\\\\#{'f077'}\\\"\");\n    }\n    &.angle-down:before {\n      content: string.unquote(\"\\\"\\\\#{'f107'}\\\"\");\n    }\n    &.check:before {\n      content: string.unquote(\"\\\"\\\\#{'f00c'}\\\"\");\n    }\n    &.xmark:before {\n      content: string.unquote(\"\\\"\\\\#{'f00d'}\\\"\");\n    }\n    &.trashcan:before {\n      content: string.unquote(\"\\\"\\\\#{'f2ed'}\\\"\");\n    }\n    &.square-check:before {\n      content: string.unquote(\"\\\"\\\\#{'f14a'}\\\"\");\n    }\n    &.square-minus:before {\n      content: string.unquote(\"\\\"\\\\#{'f146'}\\\"\");\n    }\n    &.square:before {\n      content: string.unquote(\"\\\"\\\\#{'f0c8'}\\\"\");\n    }\n    &.success:before {\n      content: string.unquote(\"\\\"\\\\#{'f164'}\\\"\");\n    }\n    &.error:before {\n      content: string.unquote(\"\\\"\\\\#{'21'}\\\"\");\n    }\n    &.warning:before {\n      content: string.unquote(\"\\\"\\\\#{'f071'}\\\"\");\n    }\n    &.info:before {\n      content: string.unquote(\"\\\"\\\\#{'f129'}\\\"\");\n    }\n    &.circle-info:before {\n      content: string.unquote(\"\\\"\\\\#{'f05a'}\\\"\");\n    }\n    &.zoom-in:before {\n      content: string.unquote(\"\\\"\\\\#{'f00e'}\\\"\");\n    }\n    &.zoom-out:before {\n      content: string.unquote(\"\\\"\\\\#{'f010'}\\\"\");\n    }\n    &.lock:before {\n      content: string.unquote(\"\\\"\\\\#{'f023'}\\\"\");\n    }\n    &.lock-open:before {\n      content: string.unquote(\"\\\"\\\\#{'f3c1'}\\\"\");\n    }\n    &.tools:before {\n      content: string.unquote(\"\\\"\\\\#{'f7d9'}\\\"\");\n    }\n    &.stethoscope:before {\n      content: string.unquote(\"\\\"\\\\#{'f0f1'}\\\"\");\n    }\n    &.chevron-up:before {\n      content: string.unquote(\"\\\"\\\\#{'f139'}\\\"\");\n    }\n    &.chevron-down:before {\n      content: string.unquote(\"\\\"\\\\#{'f13a'}\\\"\");\n    }\n  }\n}\n",
          "styleUrl": "ln-icon.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 48
      },
      "extends": [],
      "implements": ["OnChanges"],
      "templateData": "<div class=\"ln-icon\">\n  <i [attr.class]=\"classList\"\n    [attr.title]=\"title\"\n    [ngStyle]=\"style\"\n    [ngClass]=\"{'hidden': hidden, 'disabled': disabled, 'active': active, 'pad-left': padLeft, 'pad-right': padRight}\"\n    [class.green]=\"color === 'green'\" [class.blue]=\"color === 'blue'\" [class.red]=\"color === 'red'\"\n    (click)=\"handleOnClick($event)\">\n  </i>\n</div>\n"
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "appConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ApplicationConfig",
        "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/app/app.config.ts": [
        {
          "name": "appConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApplicationConfig",
          "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "appConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/component/ln-dropdown/ln-dropdown.ts",
        "type": "component",
        "linktype": "component",
        "name": "LnDropDown",
        "coveragePercent": 0,
        "coverageCount": "0/43",
        "status": "low"
      },
      {
        "filePath": "src/app/component/ln-icon/ln-icon.ts",
        "type": "component",
        "linktype": "component",
        "name": "LnIcon",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      }
    ]
  }
}
